{"version":3,"sources":["ToDo/ToDoItem.js","ToDo/ToDoList.js","ToDo/AddTodo.js","App.js","reportWebVitals.js","index.js"],"names":["ToDoItem","item","index","onSelect","onDelete","classes","completed","push","className","join","type","checked","onChange","id","title","onClick","styles","ul","listStyle","margin","padding","ToDoList","props","style","list","map","todo","idx","onToggle","onRemove","AddTodo","onCreate","useState","value","setValue","onSubmit","event","preventDefault","trim","target","App","React","todos","setTodos","expandedTodos","concat","Date","now","length","remainedTodos","filter","todosWithUpdatedStatus","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qLAqCeA,MAlCf,YAAsD,IAAnCC,EAAkC,EAAlCA,KAAMC,EAA4B,EAA5BA,MAAOC,EAAqB,EAArBA,SAAUC,EAAW,EAAXA,SAEhCC,EAAU,GAKhB,OAJIJ,EAAKK,WACLD,EAAQE,KAAK,QAIb,+BACI,uBAAMC,UAAWH,EAAQI,KAAK,KAA9B,UACI,uBACIC,KAAK,WACLC,QAASV,EAAKK,UACdM,SAAU,kBAAMT,EAASF,EAAKY,OAElC,iCAASX,EAAQ,IANrB,OAQKD,EAAKa,SAEV,wBAAQN,UAAU,KAAKO,QAAS,kBAAMX,EAASH,EAAKY,KAApD,sBClBNG,EAAS,CACXC,GAAI,CACAC,UAAW,OACXC,OAAQ,EACRC,QAAS,IA4BFC,MAxBf,SAAkBC,GACd,OACI,oBAAIC,MAAOP,EAAOC,GAAlB,SACMK,EAAME,KAAKC,KAAI,SAACC,EAAMC,GACpB,OACI,cAAC,EAAD,CACI1B,KAAMyB,EAENxB,MAAOyB,EACPxB,SAAUmB,EAAMM,SAChBxB,SAAUkB,EAAMO,UAHXH,EAAKb,UCQnBiB,MAxBf,YAA8B,IAAZC,EAAW,EAAXA,SAEd,EAA0BC,mBAAS,IAAnC,mBAAOC,EAAP,KAAcC,EAAd,KAUA,OACI,uBAAMC,SATY,SAAAC,GAClBA,EAAMC,iBACFJ,EAAMK,SACNP,EAASE,GACTC,EAAS,MAKb,UACI,uBAAOD,MAAOA,EAAOrB,SAAU,SAAAwB,GAAK,OAAIF,EAASE,EAAMG,OAAON,UAC9D,wBAAQvB,KAAK,SAAb,qBC+BG8B,MA7Cf,WAEI,MAA0BC,IAAMT,SAC5B,CACI,CAACnB,GAAI,EAAGP,WAAW,EAAOQ,MAAO,YACjC,CAACD,GAAI,EAAGP,WAAW,EAAOQ,MAAO,aACjC,CAACD,GAAI,EAAGP,WAAW,EAAOQ,MAAO,mBAJzC,mBAAO4B,EAAP,KAAcC,EAAd,KAkCA,OACI,sBAAKnC,UAAU,UAAf,UACI,6CACA,cAAC,EAAD,CAASuB,SAdD,SAAAjB,GACZ,IAAM8B,EAAgBF,EAAMG,OACxB,CACI/B,QACAD,GAAIiC,KAAKC,MACTzC,WAAW,IAGnBqC,EAASC,MAOJF,EAAMM,OAAS,cAAC,EAAD,CAAUnB,SApBf,SAAAhB,GACf,IAAMoC,EAAgBP,EAAMQ,QAAO,SAAAxB,GAAI,OAAIA,EAAKb,KAAOA,KACvD8B,EAASM,IAkB2CzB,KAAMkB,EAAOd,SA9BlD,SAAAf,GACf,IAAMsC,EAAyBT,EAAMjB,KAAI,SAAAC,GAIrC,OAHIA,EAAKb,KAAOA,IACZa,EAAKpB,WAAaoB,EAAKpB,WAEpBoB,KAEXiB,EAASQ,MAuBkF,kDChCpFC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.b237912a.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nfunction ToDoItem({item, index, onSelect, onDelete}) {\r\n\r\n    const classes = [];\r\n    if (item.completed) {\r\n        classes.push('done')\r\n    }\r\n\r\n    return (\r\n        <li>\r\n            <span className={classes.join(' ')}>\r\n                <input\r\n                    type=\"checkbox\"\r\n                    checked={item.completed}\r\n                    onChange={() => onSelect(item.id)}\r\n                />\r\n                <strong>{index + 1}</strong>\r\n                &nbsp;\r\n                {item.title}\r\n            </span>\r\n            <button className=\"rm\" onClick={() => onDelete(item.id)}>&times;</button>\r\n        </li>\r\n    );\r\n}\r\n\r\nToDoItem.propTypes = {\r\n    item: PropTypes.shape({\r\n        id: PropTypes.number,\r\n        completed: PropTypes.bool,\r\n        title: PropTypes.string\r\n    }),\r\n    index: PropTypes.number,\r\n    onSelect: PropTypes.func.isRequired,\r\n    onDelete: PropTypes.func.isRequired\r\n}\r\nexport default ToDoItem;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport ToDoItem from './ToDoItem';\r\n\r\nconst styles = {\r\n    ul: {\r\n        listStyle: 'none',\r\n        margin: 0,\r\n        padding: 0\r\n    }\r\n}\r\n\r\nfunction ToDoList(props) {\r\n    return (\r\n        <ul style={styles.ul}>\r\n            { props.list.map((todo, idx) => {\r\n                return (\r\n                    <ToDoItem\r\n                        item={todo}\r\n                        key={todo.id}\r\n                        index={idx}\r\n                        onSelect={props.onToggle}\r\n                        onDelete={props.onRemove}\r\n                    />\r\n                )\r\n            })}\r\n        </ul>\r\n    );\r\n}\r\n\r\nToDoList.propTypes = {\r\n    list: PropTypes.arrayOf(PropTypes.object).isRequired,\r\n    onToggle: PropTypes.func.isRequired,\r\n    onRemove: PropTypes.func.isRequired\r\n}\r\n\r\nexport default ToDoList;","import React, {useState} from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nfunction AddTodo({onCreate}) {\r\n\r\n    const [value, setValue] = useState('');\r\n\r\n    const submitHandler = event => {\r\n        event.preventDefault();\r\n        if (value.trim()) {\r\n            onCreate(value);\r\n            setValue('');\r\n        }\r\n    }\r\n\r\n    return (\r\n        <form onSubmit={submitHandler}>\r\n            <input value={value} onChange={event => setValue(event.target.value)} />\r\n            <button type=\"submit\">ADD</button>\r\n        </form>\r\n    )\r\n}\r\n\r\nAddTodo.propTypes = {\r\n    onCreate: PropTypes.func.isRequired\r\n}\r\n\r\nexport default AddTodo;","import React from 'react';\r\nimport ToDoList from './ToDo/ToDoList';\r\nimport AddTodo from \"./ToDo/AddTodo\";\r\n\r\nfunction App() {\r\n\r\n    const [todos, setTodos] = React.useState(\r\n        [\r\n            {id: 1, completed: false, title: \"Buy milk\"},\r\n            {id: 2, completed: false, title: \"Buy bread\"},\r\n            {id: 3, completed: false, title: \"Buy chocolate\"}\r\n        ]\r\n    )\r\n\r\n    const toggleTodo = id => {\r\n        const todosWithUpdatedStatus = todos.map(todo => {\r\n            if (todo.id === id) {\r\n                todo.completed = !todo.completed;\r\n            }\r\n            return todo;\r\n        });\r\n        setTodos(todosWithUpdatedStatus);\r\n    }\r\n\r\n    const removeTodo = id => {\r\n        const remainedTodos = todos.filter(todo => todo.id !== id);\r\n        setTodos(remainedTodos);\r\n    }\r\n\r\n    const addTodo = title => {\r\n        const expandedTodos = todos.concat(\r\n            {\r\n                title,\r\n                id: Date.now(),\r\n                completed: false\r\n            }\r\n        );\r\n        setTodos(expandedTodos);\r\n    }\r\n\r\n    return (\r\n        <div className=\"wrapper\">\r\n            <h1>ToDo List: </h1>\r\n            <AddTodo onCreate={addTodo}/>\r\n            {todos.length ? <ToDoList onRemove={removeTodo} list={todos} onToggle={toggleTodo}/> : <p>Nothing to do</p>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}